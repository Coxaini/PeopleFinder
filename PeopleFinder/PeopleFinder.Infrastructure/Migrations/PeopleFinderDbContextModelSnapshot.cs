// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PeopleFinder.Infrastructure.Persistence;

#nullable disable

namespace PeopleFinder.Infrastructure.Migrations
{
    [DbContext(typeof(PeopleFinderDbContext))]
    partial class PeopleFinderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PeopleFinder.Domain.Entities.MappingEntities.MutualFriendsRecommendation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("MutualCount")
                        .HasColumnType("int");

                    b.Property<string>("Usernames")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("MutualFriendsRecommendations", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.MessagingEntities.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChatType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<string>("LastMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastMessageAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int?>("LastMessageAuthorProfileId")
                        .HasColumnType("int");

                    b.Property<Guid?>("LastMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LogoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MembersCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LastMessageAuthorProfileId");

                    b.HasIndex("LogoId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.MessagingEntities.ChatMember", b =>
                {
                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinedAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("ChatId", "ProfileId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ChatMembers");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.MessagingEntities.MediaFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsInPrivateChat")
                        .HasColumnType("bit");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadTime")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("MediaFiles");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.MessagingEntities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AttachmentFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EditedAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentFileId");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivity")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<Guid?>("MainPictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MainPictureId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Мене звати Вова і мене цікавить похід і дослідження. Я нічого не люблю більше, ніж відкривати нові маршрути і насолоджуватися захоплюючими краєвидами. Це прекрасний спосіб залишатися активним і оцінювати навколишню природну красу.",
                            BirthDate = new DateTime(1999, 12, 31, 22, 0, 0, 0, DateTimeKind.Utc),
                            City = "Київ",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Gender = 1,
                            IsOnline = false,
                            LastActivity = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Вова",
                            UserId = 1,
                            Username = "ilya1"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Привіт, мене звати Маша! Я фанат природи і пристрасна любителька походів. Обожнюю досліджувати нові маршрути і насолоджуватися прекрасними місцями. Щось у свіжому повітрі і природній красі привертає мене.",
                            BirthDate = new DateTime(1999, 12, 31, 22, 0, 0, 0, DateTimeKind.Utc),
                            City = "Київ",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Gender = 2,
                            IsOnline = false,
                            LastActivity = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Маша",
                            UserId = 2,
                            Username = "ilya2"
                        },
                        new
                        {
                            Id = 3,
                            Bio = "Привіт, я Валя, і я великий шанувальник походів та відкриття нових місць. Немає нічого кращого, ніж відчуття досягнення після пройдення важкого маршруту. Я люблю випробовувати свої можливості і насолоджуватися захоплюючими краєвидами по дорозі.",
                            BirthDate = new DateTime(1999, 12, 31, 22, 0, 0, 0, DateTimeKind.Utc),
                            City = "Київ",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Gender = 2,
                            IsOnline = false,
                            LastActivity = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Валя",
                            UserId = 3,
                            Username = "ilya3"
                        },
                        new
                        {
                            Id = 4,
                            Bio = "Мене звуть Саша і ніщо мене не захоплює більше, ніж дослідження нових місць через походи. Це прекрасний спосіб залишатися активним і з'єднуватися з природою. Мені здається, що спокій і гармонія природи - це ідеальний втеча від суєти повсякденного життя.",
                            BirthDate = new DateTime(1999, 12, 31, 22, 0, 0, 0, DateTimeKind.Utc),
                            City = "Київ",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Gender = 2,
                            IsOnline = false,
                            LastActivity = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Саша",
                            UserId = 4,
                            Username = "ilya4"
                        },
                        new
                        {
                            Id = 5,
                            Bio = "Я люблю грати відеоігри",
                            BirthDate = new DateTime(1995, 1, 31, 22, 0, 0, 0, DateTimeKind.Utc),
                            City = "Нью-Йорк",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Gender = 1,
                            IsOnline = false,
                            LastActivity = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Джон",
                            UserId = 5,
                            Username = "john"
                        },
                        new
                        {
                            Id = 6,
                            Bio = "Я люблю походи і дослідження нових місць",
                            BirthDate = new DateTime(1990, 5, 9, 21, 0, 0, 0, DateTimeKind.Utc),
                            City = "Сан-Франциско",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Gender = 2,
                            IsOnline = false,
                            LastActivity = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Сара",
                            UserId = 6,
                            Username = "sarah"
                        },
                        new
                        {
                            Id = 7,
                            Bio = "Я великий фанат науково-фантастичних фільмів і книжок",
                            BirthDate = new DateTime(1980, 10, 19, 21, 0, 0, 0, DateTimeKind.Utc),
                            City = "Лондон",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Gender = 1,
                            IsOnline = false,
                            LastActivity = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Петро",
                            UserId = 7,
                            Username = "peter"
                        },
                        new
                        {
                            Id = 8,
                            Bio = "Я гурман і люблю спробувати нові кухні",
                            BirthDate = new DateTime(1998, 7, 14, 21, 0, 0, 0, DateTimeKind.Utc),
                            City = "Париж",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Gender = 2,
                            IsOnline = false,
                            LastActivity = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Емма",
                            UserId = 8,
                            Username = "emma"
                        },
                        new
                        {
                            Id = 9,
                            Bio = "Я люблю походи",
                            BirthDate = new DateTime(1995, 5, 9, 21, 0, 0, 0, DateTimeKind.Utc),
                            City = "Лос-Анджелес",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Gender = 1,
                            IsOnline = false,
                            LastActivity = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Джон",
                            UserId = 9,
                            Username = "user1"
                        },
                        new
                        {
                            Id = 10,
                            Bio = "Я люблю подорожувати",
                            BirthDate = new DateTime(1993, 3, 19, 22, 0, 0, 0, DateTimeKind.Utc),
                            City = "Нью-Йорк",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Gender = 2,
                            IsOnline = false,
                            LastActivity = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Сара",
                            UserId = 10,
                            Username = "user2"
                        },
                        new
                        {
                            Id = 11,
                            Bio = "Я люблю грати у баскетбол",
                            BirthDate = new DateTime(1990, 8, 14, 21, 0, 0, 0, DateTimeKind.Utc),
                            City = "Чикаго",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Gender = 1,
                            IsOnline = false,
                            LastActivity = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Боб",
                            UserId = 11,
                            Username = "user3"
                        },
                        new
                        {
                            Id = 12,
                            Bio = "Я люблю готувати",
                            BirthDate = new DateTime(1988, 6, 27, 21, 0, 0, 0, DateTimeKind.Utc),
                            City = "Сан-Франциско",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Gender = 2,
                            IsOnline = false,
                            LastActivity = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Аліса",
                            UserId = 12,
                            Username = "user4"
                        },
                        new
                        {
                            Id = 13,
                            Bio = "Я люблю читати книги",
                            BirthDate = new DateTime(1998, 4, 11, 21, 0, 0, 0, DateTimeKind.Utc),
                            City = "Бостон",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Gender = 1,
                            IsOnline = false,
                            LastActivity = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Девід",
                            UserId = 13,
                            Username = "user5"
                        },
                        new
                        {
                            Id = 14,
                            Bio = "Я люблю танцювати",
                            BirthDate = new DateTime(1996, 2, 13, 22, 0, 0, 0, DateTimeKind.Utc),
                            City = "Маямі",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Gender = 2,
                            IsOnline = false,
                            LastActivity = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Емілі",
                            UserId = 14,
                            Username = "user6"
                        },
                        new
                        {
                            Id = 15,
                            Bio = "Я люблю грати на гітарі",
                            BirthDate = new DateTime(1991, 7, 17, 21, 0, 0, 0, DateTimeKind.Utc),
                            City = "Сіетл",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Gender = 1,
                            IsOnline = false,
                            LastActivity = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Джеймс",
                            UserId = 15,
                            Username = "user7"
                        },
                        new
                        {
                            Id = 16,
                            Bio = "Я люблю живопис",
                            BirthDate = new DateTime(1989, 9, 4, 21, 0, 0, 0, DateTimeKind.Utc),
                            City = "Філадельфія",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Gender = 2,
                            IsOnline = false,
                            LastActivity = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Олівія",
                            UserId = 16,
                            Username = "user8"
                        });
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.ProfilePicture", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("PictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PictureId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.Relationship", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("AcknowledgeAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int>("InitiatorProfileId")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorProfileId");

                    b.HasIndex("ReceiverProfileId");

                    b.HasIndex("Status");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Gaming"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fishing"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cycling"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Hiking"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cooking"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Reading"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Photography"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Painting"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Traveling"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Writing"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Swimming"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Running"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Gardening"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Chess"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Knitting"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Music"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Dancing"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Singing"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Drawing"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Yoga"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Meditation"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Basketball"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Football"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Tennis"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Golf"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Soccer"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Volleyball"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Badminton"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Surfing"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Scuba Diving"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Programming"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Software Development"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Web Development"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Data Science"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Artificial Intelligence"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Machine Learning"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Cybersecurity"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Networking"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Robotics"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Embedded Systems"
                        });
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ilya@gmail.com",
                            Password = "123456789"
                        },
                        new
                        {
                            Id = 2,
                            Email = "ilya1@gmail.com",
                            Password = "123456789"
                        },
                        new
                        {
                            Id = 3,
                            Email = "ilya2@gmail.com",
                            Password = "123456789"
                        },
                        new
                        {
                            Id = 4,
                            Email = "ilya3@gmail.com",
                            Password = "123456789"
                        },
                        new
                        {
                            Id = 5,
                            Email = "john@gmail.com",
                            Password = "password123"
                        },
                        new
                        {
                            Id = 6,
                            Email = "sarah@gmail.com",
                            Password = "password456"
                        },
                        new
                        {
                            Id = 7,
                            Email = "peter@gmail.com",
                            Password = "password789"
                        },
                        new
                        {
                            Id = 8,
                            Email = "emma@gmail.com",
                            Password = "password101112"
                        },
                        new
                        {
                            Id = 9,
                            Email = "user1@gmail.com",
                            Password = "password1"
                        },
                        new
                        {
                            Id = 10,
                            Email = "user2@gmail.com",
                            Password = "password2"
                        },
                        new
                        {
                            Id = 11,
                            Email = "user3@gmail.com",
                            Password = "password3"
                        },
                        new
                        {
                            Id = 12,
                            Email = "user4@gmail.com",
                            Password = "password4"
                        },
                        new
                        {
                            Id = 13,
                            Email = "user5@gmail.com",
                            Password = "password5"
                        },
                        new
                        {
                            Id = 14,
                            Email = "user6@gmail.com",
                            Password = "password6"
                        },
                        new
                        {
                            Id = 15,
                            Email = "user7@gmail.com",
                            Password = "password7"
                        },
                        new
                        {
                            Id = 16,
                            Email = "user8@gmail.com",
                            Password = "password8"
                        });
                });

            modelBuilder.Entity("ProfileTag", b =>
                {
                    b.Property<int>("ProfilesId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("ProfilesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ProfileTag");

                    b.HasData(
                        new
                        {
                            ProfilesId = 1,
                            TagsId = 1
                        },
                        new
                        {
                            ProfilesId = 1,
                            TagsId = 2
                        },
                        new
                        {
                            ProfilesId = 2,
                            TagsId = 1
                        },
                        new
                        {
                            ProfilesId = 2,
                            TagsId = 2
                        },
                        new
                        {
                            ProfilesId = 3,
                            TagsId = 1
                        },
                        new
                        {
                            ProfilesId = 3,
                            TagsId = 3
                        });
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.MessagingEntities.Chat", b =>
                {
                    b.HasOne("PeopleFinder.Domain.Entities.Profile", "LastMessageAuthorProfile")
                        .WithMany("LastAuthorSenderChats")
                        .HasForeignKey("LastMessageAuthorProfileId");

                    b.HasOne("PeopleFinder.Domain.Entities.MessagingEntities.MediaFile", "Logo")
                        .WithMany()
                        .HasForeignKey("LogoId");

                    b.Navigation("LastMessageAuthorProfile");

                    b.Navigation("Logo");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.MessagingEntities.ChatMember", b =>
                {
                    b.HasOne("PeopleFinder.Domain.Entities.MessagingEntities.Chat", "Chat")
                        .WithMany("ChatMembers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeopleFinder.Domain.Entities.Profile", "Profile")
                        .WithMany("ChatMembers")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.MessagingEntities.Message", b =>
                {
                    b.HasOne("PeopleFinder.Domain.Entities.MessagingEntities.MediaFile", "AttachmentFile")
                        .WithMany()
                        .HasForeignKey("AttachmentFileId");

                    b.HasOne("PeopleFinder.Domain.Entities.MessagingEntities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeopleFinder.Domain.Entities.Profile", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttachmentFile");

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.Profile", b =>
                {
                    b.HasOne("PeopleFinder.Domain.Entities.MessagingEntities.MediaFile", "MainPicture")
                        .WithMany()
                        .HasForeignKey("MainPictureId");

                    b.HasOne("PeopleFinder.Domain.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("PeopleFinder.Domain.Entities.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainPicture");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.ProfilePicture", b =>
                {
                    b.HasOne("PeopleFinder.Domain.Entities.MessagingEntities.MediaFile", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeopleFinder.Domain.Entities.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.Navigation("Picture");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.Relationship", b =>
                {
                    b.HasOne("PeopleFinder.Domain.Entities.Profile", "InitiatorProfile")
                        .WithMany("InitiatedRelationships")
                        .HasForeignKey("InitiatorProfileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PeopleFinder.Domain.Entities.Profile", "ReceiverProfile")
                        .WithMany("ReceivedRelationships")
                        .HasForeignKey("ReceiverProfileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("InitiatorProfile");

                    b.Navigation("ReceiverProfile");
                });

            modelBuilder.Entity("ProfileTag", b =>
                {
                    b.HasOne("PeopleFinder.Domain.Entities.Profile", null)
                        .WithMany()
                        .HasForeignKey("ProfilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeopleFinder.Domain.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.MessagingEntities.Chat", b =>
                {
                    b.Navigation("ChatMembers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.Profile", b =>
                {
                    b.Navigation("ChatMembers");

                    b.Navigation("InitiatedRelationships");

                    b.Navigation("LastAuthorSenderChats");

                    b.Navigation("ReceivedRelationships");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.User", b =>
                {
                    b.Navigation("Profile");
                });
#pragma warning restore 612, 618
        }
    }
}
