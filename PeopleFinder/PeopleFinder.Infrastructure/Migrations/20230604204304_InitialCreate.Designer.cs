// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PeopleFinder.Infrastructure.Persistence;

#nullable disable

namespace PeopleFinder.Infrastructure.Migrations
{
    [DbContext(typeof(PeopleFinderDbContext))]
    [Migration("20230604204304_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PeopleFinder.Domain.Entities.MappingEntities.MutualFriendsRecommendation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("MutualCount")
                        .HasColumnType("int");

                    b.Property<string>("Usernames")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("MutualFriendsRecommendations", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.MessagingEntities.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChatType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<string>("LastMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastMessageAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int?>("LastMessageAuthorProfileId")
                        .HasColumnType("int");

                    b.Property<Guid?>("LastMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LogoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MembersCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LastMessageAuthorProfileId");

                    b.HasIndex("LogoId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.MessagingEntities.ChatMember", b =>
                {
                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinedAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("ChatId", "ProfileId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ChatMembers");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.MessagingEntities.MediaFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsInPrivateChat")
                        .HasColumnType("bit");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadTime")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("MediaFiles");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.MessagingEntities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AttachmentFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EditedAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentFileId");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivity")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<Guid?>("MainPictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MainPictureId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.ProfilePicture", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("PictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PictureId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.Relationship", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("AcknowledgeAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int>("InitiatorProfileId")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorProfileId");

                    b.HasIndex("ReceiverProfileId");

                    b.HasIndex("Status");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProfileTag", b =>
                {
                    b.Property<int>("ProfilesId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("ProfilesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ProfileTag");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.MessagingEntities.Chat", b =>
                {
                    b.HasOne("PeopleFinder.Domain.Entities.Profile", "LastMessageAuthorProfile")
                        .WithMany("LastAuthorSenderChats")
                        .HasForeignKey("LastMessageAuthorProfileId");

                    b.HasOne("PeopleFinder.Domain.Entities.MessagingEntities.MediaFile", "Logo")
                        .WithMany()
                        .HasForeignKey("LogoId");

                    b.Navigation("LastMessageAuthorProfile");

                    b.Navigation("Logo");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.MessagingEntities.ChatMember", b =>
                {
                    b.HasOne("PeopleFinder.Domain.Entities.MessagingEntities.Chat", "Chat")
                        .WithMany("ChatMembers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeopleFinder.Domain.Entities.Profile", "Profile")
                        .WithMany("ChatMembers")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.MessagingEntities.Message", b =>
                {
                    b.HasOne("PeopleFinder.Domain.Entities.MessagingEntities.MediaFile", "AttachmentFile")
                        .WithMany()
                        .HasForeignKey("AttachmentFileId");

                    b.HasOne("PeopleFinder.Domain.Entities.MessagingEntities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeopleFinder.Domain.Entities.Profile", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttachmentFile");

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.Profile", b =>
                {
                    b.HasOne("PeopleFinder.Domain.Entities.MessagingEntities.MediaFile", "MainPicture")
                        .WithMany()
                        .HasForeignKey("MainPictureId");

                    b.HasOne("PeopleFinder.Domain.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("PeopleFinder.Domain.Entities.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainPicture");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.ProfilePicture", b =>
                {
                    b.HasOne("PeopleFinder.Domain.Entities.MessagingEntities.MediaFile", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeopleFinder.Domain.Entities.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.Navigation("Picture");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.Relationship", b =>
                {
                    b.HasOne("PeopleFinder.Domain.Entities.Profile", "InitiatorProfile")
                        .WithMany("InitiatedRelationships")
                        .HasForeignKey("InitiatorProfileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PeopleFinder.Domain.Entities.Profile", "ReceiverProfile")
                        .WithMany("ReceivedRelationships")
                        .HasForeignKey("ReceiverProfileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("InitiatorProfile");

                    b.Navigation("ReceiverProfile");
                });

            modelBuilder.Entity("ProfileTag", b =>
                {
                    b.HasOne("PeopleFinder.Domain.Entities.Profile", null)
                        .WithMany()
                        .HasForeignKey("ProfilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeopleFinder.Domain.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.MessagingEntities.Chat", b =>
                {
                    b.Navigation("ChatMembers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.Profile", b =>
                {
                    b.Navigation("ChatMembers");

                    b.Navigation("InitiatedRelationships");

                    b.Navigation("LastAuthorSenderChats");

                    b.Navigation("ReceivedRelationships");
                });

            modelBuilder.Entity("PeopleFinder.Domain.Entities.User", b =>
                {
                    b.Navigation("Profile");
                });
#pragma warning restore 612, 618
        }
    }
}
